7.10 (Comissões de vendas) Utilize um array unidimensional para resolver o seguinte problema:
uma empresa paga seu pessoal de vendas por comissão.
O pessoal de vendas recebe R$ 200 por semana mais 9% de suas vendas brutas durante essa semana.
Por exemplo, um vendedor que vende R$ 5.000 brutos em uma semana recebe R$ 200 mais 9% de R$ 5.000 ou um total de R$ 650.
Escreva um aplicativo (utilizando um array de contadores) que determina quanto o pessoal de
vendas ganhou em cada um dos seguintes intervalos (suponha que o salário de cada vendedor foi truncado para uma quantia inteira):

a) $200–299
b) $300–399
c) $400–499
d) $500–599
e) $600–699
f) $700–799
g) $800–899
h) $900–999
i) R$1.000
e acima Resuma os resultados em formato tabular.

7.12 (Eliminação de duplicatas) Utilize um array unidimensional para resolver o seguinte problema:
escreva um aplicativo que insere cinco números, cada um entre 10 e 100, inclusive.
Enquanto cada número é lido, exiba-o somente se ele não tiver uma duplicata de um número já lido.
Cuide de tratar o “pior caso”, em que todos os cinco números são diferentes.
Utilize o menor array possível para resolver esse problema.
Exiba o conjunto completo de valores únicos inseridos depois que o usuário inserir cada valor novo.

7.14 (Lista de argumento de comprimento variável) Escreva um aplicativo que calcula
o produto de uma série de inteiros que são passados para método product utilizando uma lista de argumentos de comprimento variável.
Teste seu método com várias chamadas, cada uma com um número diferente de argumentos.

7.17 (Jogo de dados) Escreva um aplicativo para simular o lançamento de dois dados.
O aplicativo deve utilizar um objeto de classe Random, uma vez para lançar o primeiro dado e novamente para lançar o segundo dado.
A soma dos dois valores deve então ser calculada.
Cada dado pode mostrar um valor inteiro de 1 a 6,
portanto a soma dos valores irá variar de 2 a 12,
com 7 sendo a soma mais frequente e 2 e 12, as somas menos frequentes.
A Figura 7.28 mostra as 36 possíveis combinações de dois dados.
Seu aplicativo deve lançar o dado 36.000.000 vezes.
Utilize um array unidimensional para contar o número de vezes que cada possível soma aparece.
Exiba os resultados em formato tabular.

7.19 (Sistema de reservas de passagens aéreas) Uma pequena companhia aérea acabou de comprar um computador para seu novo sistema automatizado de reservas.
Você foi solicitado a desenvolver o novo sistema.
Você escreverá um aplicativo para atribuir assentos em cada voo da companhia aérea (capacidade: 10 assentos).
Seu aplicativo deve exibir as seguintes alternativas: Please type 1 for First Class e Please type 2 for Economy.
[Por favor digite 1 para Primeira Classe e digite 2 para Classe Econômica].
Se o usuário digitar 1, seu aplicativo deve atribuir assentos na primeira classe (poltronas 1 a 5).
Se o usuário digitar 2, seu aplicativo deve atribuir um assento na classe econômica (poltronas 6 a 10).
Seu aplicativo deve exibir um cartão de embarque indicando o número da poltrona da pessoa e se ela está na primeira classe ou na classe econômica.
Utilize um array unidimensional do tipo primitivo boolean para representar o gráfico de assentos do avião.
Inicialize todos os elementos do array como false para indicar que todas as poltronas estão desocupadas.
À medida que cada assento é atribuído, configure o elemento correspondente do array como true para indicar que o assento não está mais disponível.
Seu aplicativo nunca deve atribuir uma poltrona que já foi reservada.
Quando a classe econômica estiver lotada, seu aplicativo deve perguntar à pessoa se ela aceita ficar na primeira classe (e vice-versa).
Se sim, faça a atribuição apropriada de assento.
Se não, exiba a mensagem "Next flight leaves in 3 hours" [O próximo voo parte em 3 horas].

7.21 (Gráficos de tartaruga) A linguagem Logo tornou famoso o conceito de gráficos de tartaruga.
Imagine uma tartaruga mecânica que caminha no lugar sob o controle de um aplicativo Java.
A tartaruga segura uma caneta em uma de duas posições, para cima ou para baixo.
Enquanto a caneta estiver para baixo,
a tartaruga desenha formas à medida que se move,
e enquanto estiver para cima,
a tartaruga move-se quase livremente sem escrever nada.
Neste problema, você simulará a operação da tartaruga e criará um bloco de rascunho computadorizado.
Utilize um array de 20 por 20 floor que é inicializado como zeros.
Leia comandos a partir de um array que contenha esses comandos.
Monitore a posição atual da tartaruga todas as vezes e se a caneta está atualmente para cima ou para baixo.
Suponha que a tartaruga sempre inicie na posição (0, 0) do chão com sua caneta para cima.
O conjunto de comandos de tartaruga que seu aplicativo deve processar é mostrado na Figura 7.29.

---------------------------------------------------------------------------------------
| Comando         Significado                                                         |
| 1               Caneta para cima                                                    |
| 2               Caneta para baixo                                                   |
| 3               Vira para a direita                                                 |
| 4               Vira para a esquerda                                                |
| 5,10            Avance 10 espaços (substitua 10 por um número diferente de espaços) |
| 6               Exiba o array 20 por 20                                             |
| 9               Fim dos dados (sentinela)                                           |
---------------------------------------------------------------------------------------
Suponha que a tartaruga esteja em algum lugar próximo ao centro do chão.
O “programa” seguinte desenharia e exibiria um quadrado de 12 por 12 deixando a caneta na posição levantada:

2
5,12
3
5,12
3
5,12
3
5,12
1
6
9

À medida que a tartaruga se move com a caneta por baixo, configure os elementos apropriados do array floor como 1s.
Quando o comando 6 (exibir o array) for dado,
onde quer que haja um 1 no array, exiba um asterisco ou o caractere que você escolher.
Onde quer que haja um 0, exiba um espaço em branco.
Escreva um aplicativo para implementar as capacidades dos gráficos de tartaruga discutidas aqui.
Escreva vários programas de gráfico de tartaruga para desenhar formas interessantes.
Adicione outros comandos para aumentar as capacidades de sua linguagem de gráfico de tartaruga.

7.27 (Crivo de Eratóstenes) Um número primo é qualquer número inteiro maior que 1, que é uniformemente divisível apenas por ele mesmo e por 1.
O Crivo de Eratóstenes é um método para encontrar números primos.
Ele opera como segue:

a) Crie um array boolean de tipo primitivo com todos os elementos inicializados como true.
Os elementos do array com índices primos permanecerão true.
Todos os outros elementos do array por fim são configurados como false.

b) Iniciando com o índice de array 2, determine se um dado elemento é true.
Se for, faça um loop pelo restante do array e configure como false cada elemento cujo índice é um múltiplo do índice para o elemento com valor true.
Então, continue o processo com o próximo elemento com valor true.
Para o índice de array 2, todos os elementos além do elemento 2 no array que tiverem índices que são múltiplos de 2 (índices 4, 6, 8, 10 etc.)
serão configurados como false;
para o índice de array 3, todos os elementos além do elemento 3 no array que
tiverem índices que são múltiplos de 3 (índices 6, 9, 12, 15 etc.) serão configurados como false;
e assim por diante. Quando esse processo for concluído, os elementos de array que ainda forem true indicam que o índice é um número primo.
Esses índices podem ser exibidos.
Escreva um aplicativo que utiliza um array de 1.000 elementos para determinar e exibir os números primos entre 2 e 999.
Ignore elementos de array 0 e 1.


